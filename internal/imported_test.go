package internal

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tetratelabs/wazero/api"
)

func TestRandomFillFunc(t *testing.T) {
	r := randomFillImportedFunc()
	assert.Equal(t, r.Name, "random_fill_imported")
	assert.Equal(t, r.Params, []api.ValueType{api.ValueTypeI32})
	assert.Equal(t, r.Returns, []api.ValueType{api.ValueTypeI64})
	var expectedBytes []byte

	// mockMemory replicates what a WASM's module linear memory behaves like
	mockMemory := make([]byte, 100)
	writeBytesToPluginMemoryMock := func(b []byte) (uint64, error) {
		if len(b) > 100-42 {
			return 0, fmt.Errorf("mock memory out of bounds")
		}
		// remember the generated bytes into a variable for further validation
		expectedBytes = b
		// write at position 42, and return pointer
		copy(mockMemory[42:42+len(b)], b[:])
		return 42, nil
	}
	var stack []uint64
	// set stack to length parameter = 30
	stack = append(stack, 30)
	randomFill(stack, writeBytesToPluginMemoryMock)
	assert.Equal(t, 1, len(stack))
	assert.Equal(t, uint64(42), stack[0])
	assert.Equal(t, expectedBytes, mockMemory[42:72])

}

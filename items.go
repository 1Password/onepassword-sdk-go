// AUTOGENERATED - DO NOT EDIT MANUALLY
package onepassword

import (
	"context"
	"encoding/json"

	"github.com/1password/onepassword-sdk-go/internal"
)

// The Items API holds all operations the SDK client can perform on 1Password items.
type ItemsAPI interface {
	// Create a new item
	Create(ctx context.Context, params ItemCreateParams) (Item, error)

	// Get an item by vault and item ID
	Get(ctx context.Context, vaultId string, itemId string) (Item, error)

	// Update an existing item. You can currently only edit text and concealed fields.
	Update(ctx context.Context, item Item) (Item, error)

	// Delete an item.
	Delete(ctx context.Context, vaultId string, itemId string) error
}

type ItemsSource struct {
	internal.InnerClient
}

func NewItemsSource(inner internal.InnerClient) *ItemsSource {
	return &ItemsSource{inner}
}

// Create a new item
func (s ItemsSource) Create(ctx context.Context, params ItemCreateParams) (Item, error) {
	resultString, err := clientInvoke(ctx, s.InnerClient, "Create", map[string]interface{}{
		"params": params,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Get an item by vault and item ID
func (s ItemsSource) Get(ctx context.Context, vaultId string, itemId string) (Item, error) {
	resultString, err := clientInvoke(ctx, s.InnerClient, "Get", map[string]interface{}{
		"vault_id": vaultId,
		"item_id":  itemId,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Update an existing item. You can currently only edit text and concealed fields.
func (s ItemsSource) Update(ctx context.Context, item Item) (Item, error) {
	resultString, err := clientInvoke(ctx, s.InnerClient, "Update", map[string]interface{}{
		"item": item,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Delete an item.
func (s ItemsSource) Delete(ctx context.Context, vaultId string, itemId string) error {
	_, err := clientInvoke(ctx, s.InnerClient, "Delete", map[string]interface{}{
		"vault_id": vaultId,
		"item_id":  itemId,
	})
	return err
}

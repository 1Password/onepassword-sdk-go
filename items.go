// Code generated by op-codegen - DO NOT EDIT

package onepassword

import (
	"context"
	"encoding/json"

	"github.com/1password/onepassword-sdk-go/internal"
)

type ItemsSource struct {
	innerClient internal.InnerClient
	Secrets     ItemsSecretsSource
}

func NewItemsSource(inner internal.InnerClient) *ItemsSource {
	return &ItemsSource{innerClient: inner, Secrets: *NewItemsSecretsSource(inner)}
}

// Create a new item
func (s ItemsSource) Create(ctx context.Context, params ItemCreateParams) (Item, error) {
	resultString, err := clientInvoke(ctx, s.innerClient, "ItemsCreate", map[string]interface{}{
		"params": params,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Get an item by vault and item ID
func (s ItemsSource) Get(ctx context.Context, vaultId string, itemId string) (Item, error) {
	resultString, err := clientInvoke(ctx, s.innerClient, "ItemsGet", map[string]interface{}{
		"vault_id": vaultId,
		"item_id":  itemId,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Update an existing item.
func (s ItemsSource) Put(ctx context.Context, item Item) (Item, error) {
	resultString, err := clientInvoke(ctx, s.innerClient, "ItemsPut", map[string]interface{}{
		"item": item,
	})
	if err != nil {
		return Item{}, err
	}
	var result Item
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return Item{}, err
	}
	return result, nil
}

// Delete an item.
func (s ItemsSource) Delete(ctx context.Context, vaultId string, itemId string) error {
	_, err := clientInvoke(ctx, s.innerClient, "ItemsDelete", map[string]interface{}{
		"vault_id": vaultId,
		"item_id":  itemId,
	})
	return err
}

// List all items
func (s ItemsSource) ListAll(ctx context.Context, vaultId string) (*Iterator[ItemOverview], error) {
	resultString, err := clientInvoke(ctx, s.innerClient, "ItemsListAll", map[string]interface{}{
		"vault_id": vaultId,
	})
	if err != nil {
		return nil, err
	}
	var result []ItemOverview
	err = json.Unmarshal([]byte(*resultString), &result)
	if err != nil {
		return nil, err
	}
	return NewIterator(result), nil
}
